"use strict";(self.webpackChunkflashbot_docs=self.webpackChunkflashbot_docs||[]).push([[1885],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var o=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,o)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,o,n=function(e,t){if(null==e)return{};var a,o,n={},r=Object.keys(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)a=r[o],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,b=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return a?o.createElement(b,i(i({ref:t},u),{},{components:a})):o.createElement(b,i({ref:t},u))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var c=2;c<r;c++)i[c]=a[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3731:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var o=a(7462),n=a(3366),r=(a(7294),a(3905)),i=["components"],s={},l=void 0,c={unversionedId:"flashbots-mev-boost/glossary",id:"flashbots-mev-boost/glossary",isDocsHomePage:!1,title:"glossary",description:"- execution payload: a message containing the complete content of an unsigned execution payload (an object containing block properties in addition to transactions) that is provided by the execution layer (previous PoW nodes).",source:"@site/docs/flashbots-mev-boost/glossary.md",sourceDirName:"flashbots-mev-boost",slug:"/flashbots-mev-boost/glossary",permalink:"/flashbots-mev-boost/glossary",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"FAQ",permalink:"/flashbots-mev-boost/FAQ"},next:{title:"resources",permalink:"/flashbots-mev-boost/resources"}},u=[],p={toc:u};function d(e){var t=e.components,a=(0,n.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"execution payload"),": a ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/ethereum/consensus-specs/blob/a45ee9bf5b1fde766d69e551a6b1a21fe2531734/specs/merge/beacon-chain.md#executionpayload"},"message")," containing the complete content of an unsigned execution payload (an object containing block properties in addition to transactions) that is provided by the execution layer (previous PoW nodes)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"MEV-boost \u201cmiddleware\u201d"),": a piece of software that sits between the consensus client and the execution client to outsource block construction to a market of builders."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"block proposer (proposer)"),": a validator selected to sign and submit a beacon block to the network."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"user"),": a normal Ethereum user who sends transactions for block inclusion."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"searcher"),": advanced Ethereum user specialized in detecting and extracting MEV by submitting advanced transactions in batches called bundles."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"builder"),": party specialized in MEV extraction and the construction of execution payloads. Builders are trusted by searchers and users for fair transaction inclusion."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"relay"),": party that validates and routes execution payloads from builders to proposers. Relays are trusted by builders for fair routing and block inclusion. Relays are trusted by block proposers for block validity, accuracy, and data availability. Relay actors are often specialized in Denial of Service (DoS) protection and networking."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"stakers:")," actors that submit any amount of Ethereum to be staked."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"fork choice rule:")," A function evaluated by the client that takes, as input, the set of blocks and other messages that have been produced, and outputs to the client what the 'canonical chain' is."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"beacon node (BN):")," maintains the state of the beacon chain by communicating with other beacon nodes in the Ethereum network. Conceptually, a BN does not maintain keypairs that directly participate with the beacon chain."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"attestation:")," votes (embedded in messages) describing which blocks \u201cshould\u201d be the head of the chain. We can think of each such attestation as a \u201cvote\u201d to move from block A to B. Each attestation has a weight, which is the stake of the validator writing the attestation."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"validator client (VC):")," Validator clients are specialized software that let people stake 32 ETH as collateral within Ethereum's\xa0",(0,r.kt)("strong",{parentName:"li"},"consensus layer"),". Validators are responsible for proposing blocks within Ethereum's proof-of-stake consensus mechanism, and will fully replace proof-of-work miners after\xa0",(0,r.kt)("a",{parentName:"li",href:"https://ethereum.org/en/upgrades/merge/"},"The Merge"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"validator:")," Most often refers to a validator client instance, but can also refer to an individual that is physically managing a validator client. Validators**** participate in the consensus of Ethereum through validator duties. These duties include the production of beacon blocks and signing of attestations, as executed by the validator client."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"validator pubkey"),": The validator's BLS public key, uniquely identifying them.\xa0",(0,r.kt)("em",{parentName:"li"},"48-bytes, hex encoded with 0x prefix, case insensitive.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"committee:")," a group of validators. For security, each slot has committees of at least 128 validators. An attacker has less than a one in a trillion probability of controlling 2\u20443 of a committee."),(0,r.kt)("li",{parentName:"ul"},"l",(0,r.kt)("strong",{parentName:"li"},"iveness:")," state of ethereum which is valid ****if the set of finalized blocks can grow."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"plausible liveness:")," if, regardless of any previous events (attacks, latency, etc.), it is possible for new blocks to be finalized (the alternative is to become\n\u201cdeadlocked\u201d). This is to prevent situations where honest validators cannot continue\nunless someone forfeits their own stake."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"probabilistic liveness:")," if, regardless of any previous events, it is probable for new\nblocks to be finalized (after probabilistic assumptions about the network latency, capabilities of attackers, etc. are made)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Proposer/block-builder separation (PBS)"),": Proposer/block-builder separation (",(0,r.kt)("strong",{parentName:"li"},"PBS"),"\n) was proposed by Ethereum researchers as a response to the risk that MEV poses to decentralization of consensus networks. PBS is a change to the base Ethereum protocol that aims to separate block building from block proposing. Instead of the block proposer (currently the miner, after PoS the validator) also trying to produce a maximally profitable block by itself, it can outsource this to a block building\xa0",(0,r.kt)("em",{parentName:"li"},"marketplace.")," With this model, block builders would produce bundles consisting of a complete block and a fee for the proposer.")))}d.isMDXComponent=!0}}]);